* æ/Rashomon

Read the blog post: https://blog.almost.education/posts/rashomon

Rashomon constructs a datastructure from a collection of events.

It provides the basic functions that are needed to perform event-sourcing, an approach that, instead of storing state, rebuilds state from a collection of past events. It offers a solution similar to multimethods but based on Clojure datastructures and functions, and without special forms.

** The name

The term /[[https://en.wikipedia.org/wiki/Rashomon_effect][Rashomon effect]]/ is used to describe the situation when multiple observers have different, and often contradictory, interpretations of the same event. It is named for Akira Kurosawa's classic 1950 film /[[https://en.wikipedia.org/wiki/Rashomon][Rashomon]]/, where four witnesses to a man's murder offer contradictory statements at the subsequent trial.

Rashomon uses the word ~perspective~ for the function associated with an event, and the word ~testimony~ to describe the datastructure produced by rebuilding — in homage to its eponym.

** Usage

Use the project's core functions:

#+begin_src clojure
(require '[ae.rashomon :as r]
         '[ae.rashomon.event :as r.event] ;; only necessary for the easy
                                          ;; namespacing of ::r.event/type
         )

; or
(ns foo.bar
 (:require [ae.rashomon :as r])
           [ae.rashomon.event :as r.event])
#+end_src

First we can define our /perspectives/, these are functions that are run upon the /testimony/ (a datastructure) for each event with a matching event type.

Each perspective is a function accepting two arguments: the previous state of the testimony and the event to be applied. They are presumably pure functions that return the new state of the testimony.

#+begin_src clojure
(def persps {:ae.rashomon.event.type/created
             (fn [_ {:keys [::name]}] {:name name :active? true})
             :ae.rashomon.event.type/deactivated
             (fn [t _] (assoc t :active? false))})
#+end_src

Next we can define some example events from which to construct a testimony.

The only required key in the events is ~:ae.rashomon.event/type~, unless using a [[*Custom event type keys][custom key]]. The events must also contain whatever information will be needed in applying the event with the perspective that is not already present in the testimony.

The event types themselves can be whatever one wishes them to be, as long as they allow the perspective to be retrieved from the collection of perspectives.

#+begin_src clojure
(def created {::r.event/type :ae.rashomon.event.type/created ::name "Fubar"})

(def activated {::r.event/type :ae.rashomon.event.type/activated})

(def deactivated {::r.event/type :ae.rashomon.event.type/deactivated})
#+end_src

We can use ~build~ to create the testimony from the perspectives and list of events.

#+begin_src clojure
(r/build persps [created deactivated])
;; => {:name "Fubar", :active? false}
#+end_src

We can apply further events, but something is wrong... our testimony is unchanged by the event.

#+begin_src clojure
(r/apply-event (build persps [created deactivated]) persps activated)
;; => {:name "Fubar", :active? false}
#+end_src

 Nothing happened!? Our perspectives don't know what to do with the activated event. We need to add a perspective for ~:ae.rashomon.event.type/activated~:

#+begin_src clojure
(r/apply-event (r/build persps [created deactivated]) ;; the previous state of the testimony
               (assoc persps :ae.rashomon.event.type/activated
                      (fn [t _] (assoc t :active? true))) ;; the updated perspectives
               activated ;; the next event
               )
;; => {:name "Fubar", :active? true}
#+end_src

The same can be done for multiple events:

#+begin_src clojure
(r/apply-events testimony persps [e1 e2 e3])
#+end_src

The initial event must be applicable to a ~nil~ testimony if one is to call ~ae.rashomon/build~.

The collection of events that is passed to ~apply-events~ and ~build~ doesn't have to be be a list, a set works just as well as long as the order the events are applied is irrelevant. The collection will be used with ~reduce~, so as long as it works with that it will be fine. Similarly, the object that it built, the testimony, doesn't have to be a map; whatever your perspective functions accept and return will be returned by ~build~.

*** Custom event type keys

All Rashomon functions allow a custom ~event-type~ key as an optional final argument so that one can use events and perspectives that use the user's key, instead of ~:ae.rashomon.event/type~. This is to reduce your code's coupling to Rashomon.

#+begin_src clojure
(def created {:foo/event-type :my.event.type/created ::name "Fubar"})
(def deactivated {:foo/event-type :my.event.type/deactivated})

(r/build persps [created deactivated] :foo/event-type)
;; => {:name "Fubar", :active? false}
#+end_src

*** Command line

Invoke a function from the command line:
#+begin_src bash
clojure -X ae.rashomon/foo :bar
#+end_src

Run the project's tests:
#+begin_src bash
clojure -X:test
#+end_src

** Specs

See [[file:src/ae/rashomon/specs.clj]] for specs describing the structures used in Rashomon. If you are unfamiliar with Clojure Spec, [[file:test/ae/rashomon/specs_test.clj]] shows examples of the structures themselves.

** Comparison to multimethods

TODO
